{"ast":null,"code":"import { call, fork, put, takeEvery } from \"redux-saga/effects\";\nimport * as actions from '../actions/users';\nimport * as api from '../api/users'; // Step 9: Create getUser function which watcher will call\n\nfunction* getUsers() {\n  try {\n    const result = yield call(api.getUsers);\n    yield put(actions.getUsersSuccess({\n      items: result.data.data\n    }));\n  } catch (e) {\n    console.log(e);\n  }\n} // Step 8: Create User Saga Watcher\n// Whenever get-user action dispatch this saga will watch and call getUsers function\n\n\nfunction* watchGetUsersRequest() {\n  yield takeEvery(actions.Types.GET_USERS_REQUESTS, getUsers);\n} // Step 10: Create fork\n\n\nconst usersSaga = [fork(watchGetUsersRequest)];\nexport default usersSaga;","map":{"version":3,"sources":["/home/ubuntu/work/github/Starter Project/starter-app-project/components/redux/sagas/users.js"],"names":["call","fork","put","takeEvery","actions","api","getUsers","result","getUsersSuccess","items","data","e","console","log","watchGetUsersRequest","Types","GET_USERS_REQUESTS","usersSaga"],"mappings":"AAAA,SAAQA,IAAR,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,SAAzB,QAAyC,oBAAzC;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AACA,OAAO,KAAKC,GAAZ,MAAqB,cAArB,C,CAEA;;AACA,UAAUC,QAAV,GAAqB;AACjB,MAAI;AACA,UAAMC,MAAM,GAAG,MAAMP,IAAI,CAACK,GAAG,CAACC,QAAL,CAAzB;AACA,UAAMJ,GAAG,CAACE,OAAO,CAACI,eAAR,CAAwB;AAC9BC,MAAAA,KAAK,EAAEF,MAAM,CAACG,IAAP,CAAYA;AADW,KAAxB,CAAD,CAAT;AAGH,GALD,CAKE,OAAOC,CAAP,EAAU;AACRC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACH;AACJ,C,CAED;AACA;;;AACA,UAAUG,oBAAV,GAAiC;AAC7B,QAAMX,SAAS,CAACC,OAAO,CAACW,KAAR,CAAcC,kBAAf,EAAmCV,QAAnC,CAAf;AACH,C,CAED;;;AACA,MAAMW,SAAS,GAAG,CACdhB,IAAI,CAACa,oBAAD,CADU,CAAlB;AAIA,eAAeG,SAAf","sourcesContent":["import {call, fork, put, takeEvery} from \"redux-saga/effects\";\nimport * as actions from '../actions/users'\nimport * as api from '../api/users'\n\n// Step 9: Create getUser function which watcher will call\nfunction* getUsers() {\n    try {\n        const result = yield call(api.getUsers);\n        yield put(actions.getUsersSuccess({\n            items: result.data.data\n        }))\n    } catch (e) {\n        console.log(e)\n    }\n}\n\n// Step 8: Create User Saga Watcher\n// Whenever get-user action dispatch this saga will watch and call getUsers function\nfunction* watchGetUsersRequest() {\n    yield takeEvery(actions.Types.GET_USERS_REQUESTS, getUsers);\n}\n\n// Step 10: Create fork\nconst usersSaga = [\n    fork(watchGetUsersRequest)\n];\n\nexport default usersSaga;\n"]},"metadata":{},"sourceType":"module"}