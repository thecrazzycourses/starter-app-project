{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(getUsers),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchGetUsersRequest);\n\nimport { call, fork, put, takeEvery } from \"redux-saga/effects\";\nimport * as actions from '../actions/users';\nimport * as api from '../api/users'; // Step 9: Create getUser function which watcher will call\n\nfunction getUsers() {\n  var result;\n  return _regeneratorRuntime.wrap(function getUsers$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(api.getUsers());\n\n        case 3:\n          result = _context.sent;\n          console.log(result.data);\n          _context.next = 7;\n          return put(actions.getUsersSuccess({\n            items: result.data\n          }));\n\n        case 7:\n          _context.next = 12;\n          break;\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](0);\n          console.log(_context.t0);\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 9]]);\n} // Step 8: Create User Saga Watcher\n// Whenever get-user action dispatch this saga will watch and call getUsers function\n\n\nfunction watchGetUsersRequest() {\n  return _regeneratorRuntime.wrap(function watchGetUsersRequest$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeEvery(actions.Types.GET_USERS_REQUESTS, getUsers);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n} // Step 10: Create fork\n\n\nvar usersSaga = [fork(watchGetUsersRequest)];\nexport default usersSaga;","map":{"version":3,"sources":["/home/ubuntu/work/github/Starter Project/starter-app-project/components/redux/sagas/users.js"],"names":["getUsers","watchGetUsersRequest","call","fork","put","takeEvery","actions","api","result","console","log","data","getUsersSuccess","items","Types","GET_USERS_REQUESTS","usersSaga"],"mappings":";;oDAKUA,Q;qDAcAC,oB;;AAnBV,SAAQC,IAAR,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,SAAzB,QAAyC,oBAAzC;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AACA,OAAO,KAAKC,GAAZ,MAAqB,cAArB,C,CAEA;;AACA,SAAUP,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEuB,iBAAME,IAAI,CAACK,GAAG,CAACP,QAAJ,EAAD,CAAV;;AAFvB;AAEcQ,UAAAA,MAFd;AAGQC,UAAAA,OAAO,CAACC,GAAR,CAAYF,MAAM,CAACG,IAAnB;AAHR;AAIQ,iBAAMP,GAAG,CAACE,OAAO,CAACM,eAAR,CAAwB;AAC9BC,YAAAA,KAAK,EAAEL,MAAM,CAACG;AADgB,WAAxB,CAAD,CAAT;;AAJR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAQQF,UAAAA,OAAO,CAACC,GAAR;;AARR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAYA;AACA;;;AACA,SAAUT,oBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMI,SAAS,CAACC,OAAO,CAACQ,KAAR,CAAcC,kBAAf,EAAmCf,QAAnC,CAAf;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAIA;;;AACA,IAAMgB,SAAS,GAAG,CACdb,IAAI,CAACF,oBAAD,CADU,CAAlB;AAIA,eAAee,SAAf","sourcesContent":["import {call, fork, put, takeEvery} from \"redux-saga/effects\";\nimport * as actions from '../actions/users'\nimport * as api from '../api/users'\n\n// Step 9: Create getUser function which watcher will call\nfunction* getUsers() {\n    try {\n        const result = yield call(api.getUsers());\n        console.log(result.data);\n        yield put(actions.getUsersSuccess({\n            items: result.data\n        }))\n    } catch (e) {\n        console.log(e)\n    }\n}\n\n// Step 8: Create User Saga Watcher\n// Whenever get-user action dispatch this saga will watch and call getUsers function\nfunction* watchGetUsersRequest() {\n    yield takeEvery(actions.Types.GET_USERS_REQUESTS, getUsers);\n}\n\n// Step 10: Create fork\nconst usersSaga = [\n    fork(watchGetUsersRequest)\n];\n\nexport default usersSaga;\n"]},"metadata":{},"sourceType":"module"}