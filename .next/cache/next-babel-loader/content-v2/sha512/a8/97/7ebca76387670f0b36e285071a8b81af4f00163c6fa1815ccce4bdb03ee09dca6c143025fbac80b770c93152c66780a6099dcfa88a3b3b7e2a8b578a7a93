{"ast":null,"code":"import { call, fork, put, takeEvery } from \"redux-saga/effects\";\nimport * as actions from '../actions/users';\nimport { useGetPosts } from \"../../../actions\";\nexport const fetchUsers = () => {\n  const {\n    data,\n    error,\n    loading\n  } = useGetPosts();\n  return {\n    data\n  };\n}; // Step 9: Create getUser function which watcher will call\n\nfunction* getUsers() {\n  try {\n    const {\n      data\n    } = yield call(fetchUsers);\n    console.log(data);\n    yield put(actions.getUsersSuccess({\n      items: data.data\n    }));\n  } catch (e) {\n    console.log(e);\n  }\n} // Step 8: Create User Saga Watcher\n// Whenever get-user action dispatch this saga will watch and call getUsers function\n\n\nfunction* watchGetUsersRequest() {\n  yield takeEvery(actions.Types.GET_USERS_REQUESTS, getUsers);\n} // Step 10: Create fork\n\n\nconst usersSaga = [fork(watchGetUsersRequest)];\nexport default usersSaga;","map":{"version":3,"sources":["/home/ubuntu/work/github/Starter Project/starter-app-project/components/redux/sagas/users.js"],"names":["call","fork","put","takeEvery","actions","useGetPosts","fetchUsers","data","error","loading","getUsers","console","log","getUsersSuccess","items","e","watchGetUsersRequest","Types","GET_USERS_REQUESTS","usersSaga"],"mappings":"AAAA,SAAQA,IAAR,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,SAAzB,QAAyC,oBAAzC;AACA,OAAO,KAAKC,OAAZ,MAAyB,kBAAzB;AACA,SAAQC,WAAR,QAA0B,kBAA1B;AAEA,OAAO,MAAMC,UAAU,GAAG,MAAM;AAC5B,QAAM;AAACC,IAAAA,IAAD;AAAOC,IAAAA,KAAP;AAAcC,IAAAA;AAAd,MAAyBJ,WAAW,EAA1C;AACA,SAAO;AAACE,IAAAA;AAAD,GAAP;AACH,CAHM,C,CAMP;;AACA,UAAUG,QAAV,GAAqB;AACjB,MAAI;AACA,UAAM;AAACH,MAAAA;AAAD,QAAS,MAAMP,IAAI,CAACM,UAAD,CAAzB;AACAK,IAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ;AACA,UAAML,GAAG,CAACE,OAAO,CAACS,eAAR,CAAwB;AAC9BC,MAAAA,KAAK,EAAEP,IAAI,CAACA;AADkB,KAAxB,CAAD,CAAT;AAGH,GAND,CAME,OAAOQ,CAAP,EAAU;AACRJ,IAAAA,OAAO,CAACC,GAAR,CAAYG,CAAZ;AACH;AACJ,C,CAED;AACA;;;AACA,UAAUC,oBAAV,GAAiC;AAC7B,QAAMb,SAAS,CAACC,OAAO,CAACa,KAAR,CAAcC,kBAAf,EAAmCR,QAAnC,CAAf;AACH,C,CAED;;;AACA,MAAMS,SAAS,GAAG,CACdlB,IAAI,CAACe,oBAAD,CADU,CAAlB;AAIA,eAAeG,SAAf","sourcesContent":["import {call, fork, put, takeEvery} from \"redux-saga/effects\";\nimport * as actions from '../actions/users'\nimport {useGetPosts} from \"../../../actions\";\n\nexport const fetchUsers = () => {\n    const {data, error, loading} = useGetPosts();\n    return {data}\n};\n\n\n// Step 9: Create getUser function which watcher will call\nfunction* getUsers() {\n    try {\n        const {data} = yield call(fetchUsers);\n        console.log(data);\n        yield put(actions.getUsersSuccess({\n            items: data.data\n        }))\n    } catch (e) {\n        console.log(e)\n    }\n}\n\n// Step 8: Create User Saga Watcher\n// Whenever get-user action dispatch this saga will watch and call getUsers function\nfunction* watchGetUsersRequest() {\n    yield takeEvery(actions.Types.GET_USERS_REQUESTS, getUsers);\n}\n\n// Step 10: Create fork\nconst usersSaga = [\n    fork(watchGetUsersRequest)\n];\n\nexport default usersSaga;\n"]},"metadata":{},"sourceType":"module"}